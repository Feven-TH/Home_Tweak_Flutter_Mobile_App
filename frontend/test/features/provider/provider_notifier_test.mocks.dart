// Mocks generated by Mockito 5.4.6 from annotations
// in frontend/test/features/provider/provider_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:frontend/features/provider/data/provider_model.dart' as _i3;
import 'package:frontend/features/provider/domain/provider_repository_interface.dart'
    as _i2;
import 'package:frontend/features/provider/domain/provider_usecases/create_provider.dart'
    as _i9;
import 'package:frontend/features/provider/domain/provider_usecases/get_all_providers.dart'
    as _i4;
import 'package:frontend/features/provider/domain/provider_usecases/get_provider_details.dart'
    as _i7;
import 'package:frontend/features/provider/domain/provider_usecases/get_providers_by_category.dart'
    as _i6;
import 'package:frontend/features/provider/domain/provider_usecases/search_providers_by_name.dart'
    as _i8;
import 'package:frontend/features/provider/domain/provider_usecases/update_provider.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProviderRepository_0 extends _i1.SmartFake
    implements _i2.IProviderRepository {
  _FakeIProviderRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProvider_1 extends _i1.SmartFake implements _i3.Provider {
  _FakeProvider_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllProviders].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProviders extends _i1.Mock implements _i4.GetAllProviders {
  MockGetAllProviders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProviderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProviderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProviderRepository);

  @override
  _i5.Future<List<_i3.Provider>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<List<_i3.Provider>>.value(<_i3.Provider>[]),
          )
          as _i5.Future<List<_i3.Provider>>);
}

/// A class which mocks [GetProvidersByCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProvidersByCategory extends _i1.Mock
    implements _i6.GetProvidersByCategory {
  MockGetProvidersByCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProviderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProviderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProviderRepository);

  @override
  _i5.Future<List<_i3.Provider>> call(int? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [categoryId]),
            returnValue: _i5.Future<List<_i3.Provider>>.value(<_i3.Provider>[]),
          )
          as _i5.Future<List<_i3.Provider>>);
}

/// A class which mocks [GetProviderDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProviderDetails extends _i1.Mock
    implements _i7.GetProviderDetails {
  MockGetProviderDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProviderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProviderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProviderRepository);

  @override
  _i5.Future<_i3.Provider> call(int? providerId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [providerId]),
            returnValue: _i5.Future<_i3.Provider>.value(
              _FakeProvider_1(this, Invocation.method(#call, [providerId])),
            ),
          )
          as _i5.Future<_i3.Provider>);
}

/// A class which mocks [SearchProvidersByName].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchProvidersByName extends _i1.Mock
    implements _i8.SearchProvidersByName {
  MockSearchProvidersByName() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProviderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProviderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProviderRepository);

  @override
  _i5.Future<List<_i3.Provider>> call(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query]),
            returnValue: _i5.Future<List<_i3.Provider>>.value(<_i3.Provider>[]),
          )
          as _i5.Future<List<_i3.Provider>>);
}

/// A class which mocks [CreateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProvider extends _i1.Mock implements _i9.CreateProvider {
  MockCreateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProviderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProviderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProviderRepository);

  @override
  _i5.Future<_i3.Provider> call(_i3.Provider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#call, [provider]),
            returnValue: _i5.Future<_i3.Provider>.value(
              _FakeProvider_1(this, Invocation.method(#call, [provider])),
            ),
          )
          as _i5.Future<_i3.Provider>);
}

/// A class which mocks [UpdateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProvider extends _i1.Mock implements _i10.UpdateProvider {
  MockUpdateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProviderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProviderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProviderRepository);

  @override
  _i5.Future<_i3.Provider> call(int? id, _i3.Provider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id, provider]),
            returnValue: _i5.Future<_i3.Provider>.value(
              _FakeProvider_1(this, Invocation.method(#call, [id, provider])),
            ),
          )
          as _i5.Future<_i3.Provider>);
}
